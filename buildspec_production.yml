version: 0.2

env:
  variables:
    TF_VERSION:                                "0.11.7"
    TF_VAR_stage:                              "prd"
    TF_VAR_tfstate_setup_key:                  "setup.terraform.tfstate"
    TF_VAR_tfstate_service_base_pre_key:       "service.base.pre.prd.terraform.tfstate"
    TF_VAR_tfstate_service_api_staging_key:    "service.api.stg.terraform.tfstate"
    TF_VAR_tfstate_service_api_production_key: "service.api.prd.terraform.tfstate"
    TF_VAR_tfstate_service_base_after_api_key: "service.base.after_api.prd.terraform.tfstate"
    TF_VAR_tfstate_service_web_staging_key:    "service.web.stg.terraform.tfstate"
    TF_VAR_tfstate_service_web_production_key: "service.web.prd.terraform.tfstate"
    TF_VAR_tfstate_service_pipeline_key:       "service.pipeline.terraform.tfstate"

phases:
  install:
    commands:
      - curl -s -qL -o /usr/bin/jq https://stedolan.github.io/jq/download/linux64/jq
      - chmod +x /usr/bin/jq
      - curl -s -qL -o terraform.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
      - unzip -o terraform.zip
      - sudo mv terraform /bin
      - rm terraform.zip

  pre_build:
    commands:
      # Workaround until TF supports creds via Task Roles when running on ECS or CodeBuild
      # See: https://github.com/hashicorp/terraform/issues/8746
      - export AWS_RAW_CRED=$(curl --silent http://169.254.170.2:80$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI)
      - export AWS_ACCESS_KEY_ID=$(echo $AWS_RAW_CRED | jq -r '.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo $AWS_RAW_CRED | jq -r '.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo $AWS_RAW_CRED | jq -r '.Token')

  build:
    commands:
      # base
      - cd environments/service/base/pre/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_base_pre_key}"
      - terraform plan
      - terraform apply -auto-approve
      - cloudformation_api_stack=`terraform output cloudformation_api_stack`
      - firehose_delivery_stream_arn=`terraform output firehose_delivery_stream_arn`
      - iam_role_api_log_cloudwatchlogs_to_s3_policy_arn=`terraform output iam_role_api_log_cloudwatchlogs_to_s3_policy_arn`
      - cd -
      # api
      - cd environments/service/api/production/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_api_production_key}"
      - terraform plan
      - terraform apply -auto-approve
      - codebuild_name=`terraform output codebuild_api_name`
      - cd -
      - ./bin/exec_codebuild.sh "$codebuild_name"
      - export TF_VAR_apigw_api_id=$(aws cloudformation describe-stack-resource --stack-name "${cloudformation_api_stack}" --logical-resource-id ApiGatewayRestApi | jq -r '.StackResourceDetail.PhysicalResourceId')
      - ./bin/mapping_logs_firehose.sh "$cloudformation_api_stack" "$firehose_delivery_stream_arn" "$iam_role_api_log_cloudwatchlogs_to_s3_policy_arn"
      # base
      - cd environments/service/base/after_api
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_base_after_api_key}"
      - terraform plan
      - terraform apply -auto-approve
      - cd -
      # web
      - cd environments/service/web/production/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_web_production_key}"
      - terraform plan
      - terraform apply -auto-approve
      - codebuild_name=`terraform output codebuild_web_name`
      - cd -
      - ./bin/exec_codebuild.sh "$codebuild_name"
      # pipeline
      - cd environments/service/pipeline/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_pipeline_key}"
      - terraform plan
      - terraform apply -auto-approve
      - cd -

  post_build:
    commands:
      - touch infrastructure.fin
      - echo "terraform completed on `date`"

artifacts:
  files:
    - infrastructure.fin
