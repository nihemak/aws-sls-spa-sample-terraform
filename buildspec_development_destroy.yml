version: 0.2

env:
  variables:
    TF_VERSION:                                "0.11.7"
    TF_VAR_stage:                              "dev"
    TF_VAR_tfstate_setup_key:                  "setup.terraform.tfstate"
    TF_VAR_tfstate_service_base_pre_key:       "service.base.pre.dev.terraform.tfstate"
    TF_VAR_tfstate_service_api_key:            "service.api.dev.terraform.tfstate"
    TF_VAR_tfstate_service_base_after_api_key: "service.base.after_api.dev.terraform.tfstate"
    TF_VAR_tfstate_service_web_key:            "service.web.dev.terraform.tfstate"

phases:
  install:
    commands:
      - ./bin/install_build_commands.sh "${TF_VERSION}"

  pre_build:
    commands:
      - . ./bin/export_aws_settings.sh

  build:
    commands:
      # info
      - cd environments/service/web/development/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_web_key}"
      - codebuild_destroy_web_name=`terraform output codebuild_destroy_web_name`
      - cd -
      - cd environments/service/api/development/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_api_key}"
      - codebuild_destroy_api_name=`terraform output codebuild_destroy_api_name`
      - cd -
      - cd environments/service/base/pre/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_base_pre_key}"
      - cloudformation_api_stack=`terraform output cloudformation_api_stack`
      - export TF_VAR_apigw_api_id=$(aws cloudformation describe-stack-resource --stack-name "${cloudformation_api_stack}" --logical-resource-id ApiGatewayRestApi | jq -r '.StackResourceDetail.PhysicalResourceId')
      - cd -
      - cd environments/setup/development
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_setup_key}"
      - s3_bucket_audit_log_id=`terraform output s3_bucket_audit_log_id`
      - s3_bucket_audit_log_bucket_domain_name=`terraform output s3_bucket_audit_log_bucket_domain_name`
      - s3_bucket_api_log_arn=`terraform output s3_bucket_api_log_arn`
      - cd -
      # web
      - ./bin/exec_codebuild.sh "$codebuild_destroy_web_name" "$codecommit_web_branch"
      - cd environments/service/web/development/
      - terraform plan -destroy
      - terraform destroy -auto-approve
      - cd -
      # base
      - cd environments/service/base/after_api
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_base_after_api_key}"
      - terraform plan -destroy
      - terraform destroy -auto-approve
      - cd -
      # api
      - ./bin/mapping_logs_delete_firehose.sh "$cloudformation_api_stack"
      - ./bin/exec_codebuild.sh "$codebuild_destroy_api_name" "$codecommit_api_branch"
      - cd environments/service/api/development/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_api_key}"
      - terraform plan -destroy
      - terraform destroy -auto-approve
      - cd -
      # base
      - cd environments/service/base/pre/
      - terraform init -backend-config="bucket=${TF_VAR_s3_bucket_terraform_state_id}" -backend-config="key=${TF_VAR_tfstate_service_base_pre_key}"
      - terraform plan -destroy -var "resource_prefix=${TF_VAR_service_name}-${TF_VAR_stage}" -var "s3_bucket_audit_log_id=${s3_bucket_audit_log_id}" -var "s3_bucket_audit_log_bucket_domain_name=${s3_bucket_audit_log_bucket_domain_name}" -var "s3_bucket_api_log_arn=${s3_bucket_api_log_arn}"
      - terraform destroy -auto-approve -var "resource_prefix=${TF_VAR_service_name}-${TF_VAR_stage}" -var "s3_bucket_audit_log_id=${s3_bucket_audit_log_id}" -var "s3_bucket_audit_log_bucket_domain_name=${s3_bucket_audit_log_bucket_domain_name}" -var "s3_bucket_api_log_arn=${s3_bucket_api_log_arn}"
      - cd -

  post_build:
    commands:
      - touch infrastructure_destroy.fin
      - echo "terraform completed on `date`"

artifacts:
  files:
    - infrastructure_destroy.fin
